---
- name: configure local machine for me
  hosts: local
  remote_user: samueldc
  become: yes
  vars_prompt:
    
    - name: ponto_redecamara
      prompt: Ponto RedeCamara
      private: no
    
    - name: password_redecamara
      prompt: Password Redecamara

  tasks:
  
  - name: ensure vim is installed
    apt:
      name: vim
      state: present
  
  - name: ensure curl is installed
    apt:
      name: curl
      state: present
  
  - name: mkdir /mnt/nas
    file:
      path: /mnt/nas
      state: directory

  - name: mount my nas
    ansible.posix.mount:
      src: 192.168.1.253:/Dados
      path: /mnt/nas
      fstype: nfs
      opts: user,rw,exec,auto,vers=3,local_lock=all,_netdev
      state: mounted
  
  - name: install davfs2
    apt:
      name: davfs2
      state: present

  - name: mkdir /mnt/nextcloud-camara
    file:
      path: /mnt/nextcloud-camara
      state: directory
      mode: '0775'
      owner: samueldc
      group: samueldc

  - name: mkdir /home/samueldc/.davfs2
    file:
      path: /home/samueldc/.davfs2
      state: directory
      mode: '0770'
      owner: samueldc
      group: samueldc

  - name: cp  /etc/davfs2/secrets /home/samueldc/.davfs2/secrets
    copy:
      src: /etc/davfs2/secrets
      remote_src: yes
      dest: /home/samueldc/.davfs2/secrets
      owner: samueldc
      group: samueldc
      mode: '0600'

  - name: edit secrets file
    lineinfile:
      path: /home/samueldc/.davfs2/secrets
      line: 'https://drive.camara.leg.br/remote.php/webdav/ {{ ponto_redecamara }} {{ password_redecamara }}'
      insertafter: EOF
      state: present

  - name: edit /etc/davfs2/davfs2.conf and add use_locks 0
    lineinfile:
      path: /etc/davfs2/davfs2.conf
      line: use_locks 0
      insertafter: EOF
      state: present

  - name: configure davfs2 group
    user:
      append: yes
      groups: davfs2
      name: samueldc
      state: present

  - name: fstab my webdav nextcloud
    ansible.posix.mount:
      src: https://drive.camara.leg.br/remote.php/webdav/
      path: /mnt/nextcloud-camara
      fstype: davfs
      opts: user,rw,auto,uid=samueldc,_netdev
      state: present

  - name: mount my webdav nextcloud
    become: yes
    become_user: samueldc
    command: 
      cmd: mount /mnt/nextcloud-camara
      creates: /mnt/nextcloud-camara/.ansible-created
      warn: no

  - name: install rawtherapee
    apt: 
      name: rawtherapee
      state: present

  - name: install inkscape
    apt: 
      name: inkscape
      state: present

  - name: install gimp
    apt: 
      name: gimp
      state: present

  - name: install steam
    apt:
      name: steam
      state: present

  - name: install google chrome
    apt:
      deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

  - name: install zoom
    apt:
      deb:  https://zoom.us/client/latest/zoom_amd64.deb

  - name: install virtual machine manager
    apt:
      name: virt-manager
      state: present

  - name: install notepadqq
    apt:
      name: notepadqq
      state: present

#  - name: download camunda
#    become: yes
#    become_user: samueldc
#    get_url:
#      url: https://downloads.camunda.cloud/release/camunda-modeler/nightly/camunda-modeler-nightly-linux-x64.tar.gz
#      dest: /home/samueldc/Downloads
#      group: samueldc
#      owner: samueldc
#      mode: '0660'
#
#  - name: extract camunda
#    command: 
#      cmd: tar xvfz /home/samueldc/Downloads/camunda-modeler-nightly-linux-x64.tar.gz --one-top-level=camunda --strip-components=1 -C /opt
#
  - name: download and extract camunda
    unarchive:
      src: https://downloads.camunda.cloud/release/camunda-modeler/nightly/camunda-modeler-nightly-linux-x64.tar.gz
      dest: /opt
      remote_src: yes
      extra_opts: 
      - --one-top-level=camunda
      - --strip-components=1
      creates: /opt/camunda/camunda-modeler

  - name: add microsoft key
    apt_key:
      url: https://packages.microsoft.com/keys/microsoft.asc
      keyring: /etc/apt/trusted.gpg.d/packages.microsoft.gpg
      state: present

  - name: update apt cache
    apt:
      update_cache: yes

  - name: add microsoft repo
    apt_repository:
      repo: deb [arch=amd64] https://packages.microsoft.com/repos/code stable main
      state: present

  - name: install vscode
    apt:
      name: code
      state: present

  - name: install insomnia
    community.general.snap:
      name: insomnia-designer

  - name: install zsh
    apt: 
      name: zsh
      state: present

  - name: return zsh path
    shell: which zsh
    register: zsh_path

  - name: configure zsh
    user:
      name: samueldc
      state: present
      shell: "{{ zsh_path.stdout }}"

  - name: populate .zshrc with recommended settings
    copy:
      src: /etc/zsh/newuser.zshrc.recommended
      remote_src: yes
      dest: /home/samueldc/.zshrc
      owner: samueldc
      group: samueldc
      mode: '0600'

  - name: install oh-my-zsh
    become: yes
    become_user: samueldc
    shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    args:
      creates: /home/samueldc/.oh-my-zsh/oh-my-zsh.sh

  - name: install zsh extras
    apt: 
      name: 
      - powerline
      - fonts-powerline
      - zsh-theme-powerlevel9k
      - zsh-syntax-highlighting
      state: present

  - name: configure powerlevel9k zsh theme
    lineinfile:
      path: /home/samueldc/.zshrc
      line: source /usr/share/powerlevel9k/powerlevel9k.zsh-theme
      insertafter: EOF
      state: present

  - name: configure zsh syntax highlighting
    lineinfile:
      path: /home/samueldc/.zshrc
      line: source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
      insertafter: EOF
      state: present

  - name: configure xhost for gparted
    lineinfile:
      path: /home/samueldc/.zshrc
      line: "xhost +local:"
      insertafter: EOF
      state: present

  - name: install spaceship prompt
    become: yes
    become_user: samueldc
    shell: git clone https://github.com/denysdovhan/spaceship-prompt.git /home/samueldc/.oh-my-zsh/themes/spaceship-prompt
    args:
      creates: /home/samueldc/.oh-my-zsh/themes/spaceship-prompt/spaceship.zsh-theme

  - name: configure spaceship prompt
    become: yes
    become_user: samueldc
    shell: ln -s /home/samueldc/.oh-my-zsh/themes/spaceship-prompt/spaceship.zsh-theme /home/samueldc/.oh-my-zsh/themes/spaceship.zsh-theme
    args:
      creates: /home/samueldc/.oh-my-zsh/themes/spaceship.zsh-theme

  - name: configure spaceship theme
    lineinfile:
      path: /home/samueldc/.zshrc
      regexp: '^ZSH_THEME=.*$'
      line: 'ZSH_THEME="spaceship"'
      state: present

  - name: configure spaceship preferences
    blockinfile:
      path: /home/samueldc/.zshrc
      marker: "# {mark} SPACESHIP PREFERENCES"
      insertafter: EOF
      block: |
        SPACESHIP_PROMPT_ORDER=(
          user          # Username section
          dir           # Current directory section
          host          # Hostname section
          git           # Git section (git_branch + git_status)
          hg            # Mercurial section (hg_branch  + hg_status)
          exec_time     # Execution time
          line_sep      # Line break
          vi_mode       # Vi-mode indicator
          jobs          # Background jobs indicator
          exit_code     # Exit code section
          char          # Prompt character
        )
        SPACESHIP_USER_SHOW=always
        SPACESHIP_PROMPT_ADD_NEWLINE=true
        SPACESHIP_CHAR_SYMBOL="‚ùØ"
        SPACESHIP_CHAR_SUFFIX=" "

  - name: reads zsh config file
    become: yes
    become_user: samueldc
    shell: cat /home/samueldc/.zshrc
    register: zshrc_contents

  - name: install zinit
    become: yes
    become_user: samueldc
    shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)"
    when: "'Added by Zinit' not in lookup('file', '/home/samueldc/.zshrc')"
#    when: zshrc_contents.stdout is not search("Added by Zinit")

  - name: reload shell
    become: yes
    become_user: samueldc
    shell: source /home/samueldc/.zshrc
    args:
      executable: "{{ zsh_path.stdout }}"

  - name: compile zinit
    become: yes
    become_user: samueldc
    shell: zinit self-update
    args:
      creates: /home/samueldc/.zinit/completions

  - name: install zinit plugins
    blockinfile:
      path: /home/samueldc/.zshrc
      marker: "# {mark} ZINIT PLUGINS"
      insertafter: EOF
      block: |
        zinit light zdharma/fast-syntax-highlighting
        zinit light zsh-users/zsh-autosuggestions
        zinit light zsh-users/zsh-completions

#  - name: configure webdav for mounting
#    lineinfile:
#      path: /home/samueldc/.xinitrc
#      line: "mount /mnt/nextcloud-camara"
#      insertafter: EOF
#      state: present
#      create: yes
#
  - name: configure webdav for mounting
    blockinfile:
      path: /home/samueldc/.config/autostart/mount.desktop
      marker: "# {mark} MOUNT WEBDAV"
      insertafter: EOF
      create: yes
      block: |
        [Desktop Entry]
        Type=Application
        Exec=mount /mnt/nextcloud-camara
        Hidden=false
        NoDisplay=false
        X-GNOME-Autostart-enabled=true
        Name[en_US]=Mount WebDav
        Name=Mount WebDav
        Comment[en_US]=
        Comment=

#  - name: configure vscode settings for zsh

  - name: configure function keys to work only when fn is pressed
    lineinfile:
      path: /etc/modprobe.d/hid_apple.conf
      line: options hid_apple fnmode=2
      insertafter: EOF
      state: present
      create: yes
    register: result_fn

  - name: reload kernel modules
    shell: update-initramfs -u -k all
    when: result_fn.changed

  - name: configure cedilla
    lineinfile:
      path: /etc/environment
      line: GTK_IM_MODULE=cedilla
      insertafter: EOF
      state: present

  - name: install pksc11 dependencies
    apt: 
      name: 
      - libjbig0
      - libtiff5
      - fontconfig-config
      - libfontconfig1
      - libwxbase3.0-0v5
      - libwxgtk3.0-gtk3-0v5
      - libpcsclite1
      - libccid
      - pcscd
      - libnss3
      - libnss3-tools
      state: present

  - name: create temporary safenet directory
    tempfile:
      state: directory
      suffix: safenet
    register: safenet_dir

  - name: download and extract safenet client
    unarchive:
      src: http://repositorio.serpro.gov.br/drivers/safenet/linux/SafenetAuthenticationClient-BR-10.3_Linux_Ubuntu-RedHat(32-64bits).zip
      dest: "{{ safenet_dir.path }}"
      remote_src: yes

  - name: install safenet client
    apt:
      deb: "{{ safenet_dir.path }}/SafenetAuthenticationClient-BR-10.0.37-0_amd64.deb"

  - name: create a symbolic link to libcrypto
    file:
      src: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1
      dest: /usr/lib/libcrypto.so.6
      state: link

  - name: verify pkcs11 for chrome
    become: yes
    become_user: samueldc
    shell: modutil -dbdir sql:/home/samueldc/.pki/nssdb/ -list | grep "Safenet Token"
    register: result_pkcs11

  - name: configure pkcs11 for chrome
    become: yes
    become_user: samueldc
    shell: modutil -dbdir sql:/home/samueldc/.pki/nssdb/ -add "Safenet Token" -libfile /usr/lib/libeToken.so
    when: "'Safenet Token' not in result_pkcs11.stdout"
